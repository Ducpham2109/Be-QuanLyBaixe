// <auto-generated />
using System;
using DATN.Infastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DATN.Infastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DATN.Core.Entities.Accounts", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Username");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DATN.Core.Entities.Bills", b =>
                {
                    b.Property<int>("BillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("EntryTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LisenseVehicle")
                        .HasColumnType("text");

                    b.Property<string>("OutTime")
                        .HasColumnType("text");

                    b.Property<int>("ParkingCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("VehicleyType")
                        .HasColumnType("text");

                    b.HasKey("BillsId");

                    b.HasIndex("ParkingCode");

                    b.HasIndex("LisenseVehicle", "EntryTime");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("DATN.Core.Entities.EntryVehicles", b =>
                {
                    b.Property<string>("LisenseVehicle")
                        .HasColumnType("text");

                    b.Property<string>("EntryTime")
                        .HasColumnType("text");

                    b.Property<string>("AccountUsername")
                        .HasColumnType("text");

                    b.Property<int>("IDCard")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ParkingCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("VehicleyType")
                        .HasColumnType("text");

                    b.HasKey("LisenseVehicle", "EntryTime");

                    b.HasIndex("AccountUsername");

                    b.HasIndex("ParkingCode");

                    b.ToTable("EntryVehicles");
                });

            modelBuilder.Entity("DATN.Core.Entities.Managements", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParkingCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Username");

                    b.HasIndex("ParkingCode");

                    b.ToTable("Managements");
                });

            modelBuilder.Entity("DATN.Core.Entities.Parkings", b =>
                {
                    b.Property<int>("ParkingCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MmPrice")
                        .HasColumnType("integer");

                    b.Property<int>("MnPrice")
                        .HasColumnType("integer");

                    b.Property<int>("NmPrice")
                        .HasColumnType("integer");

                    b.Property<int>("NnPrice")
                        .HasColumnType("integer");

                    b.Property<string>("ParkingAddress")
                        .HasColumnType("text");

                    b.Property<string>("ParkingName")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ParkingCode");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("DATN.Core.Entities.Tickets", b =>
                {
                    b.Property<int>("IDCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Monney")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimingCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingDelete")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TimingUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("IDCard");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DATN.Core.Entities.Bills", b =>
                {
                    b.HasOne("DATN.Core.Entities.Parkings", "Parking")
                        .WithMany("Bills")
                        .HasForeignKey("ParkingCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Core.Entities.EntryVehicles", "EntryVehicle")
                        .WithMany("Bills")
                        .HasForeignKey("LisenseVehicle", "EntryTime")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EntryVehicle");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("DATN.Core.Entities.EntryVehicles", b =>
                {
                    b.HasOne("DATN.Core.Entities.Accounts", "Account")
                        .WithMany("EntryVehicles")
                        .HasForeignKey("AccountUsername");

                    b.HasOne("DATN.Core.Entities.Parkings", "Parking")
                        .WithMany("EntryVehicles")
                        .HasForeignKey("ParkingCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("DATN.Core.Entities.Managements", b =>
                {
                    b.HasOne("DATN.Core.Entities.Parkings", "Parking")
                        .WithMany("Managements")
                        .HasForeignKey("ParkingCode");

                    b.HasOne("DATN.Core.Entities.Accounts", "Account")
                        .WithOne("Management")
                        .HasForeignKey("DATN.Core.Entities.Managements", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("DATN.Core.Entities.Accounts", b =>
                {
                    b.Navigation("EntryVehicles");

                    b.Navigation("Management");
                });

            modelBuilder.Entity("DATN.Core.Entities.EntryVehicles", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("DATN.Core.Entities.Parkings", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("EntryVehicles");

                    b.Navigation("Managements");
                });
#pragma warning restore 612, 618
        }
    }
}
